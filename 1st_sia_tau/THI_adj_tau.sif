!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                            !
!          EXPERIMENTAL DETAILS              !
!            SYSTEM OF UNITS                 !
!                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Experiment definition
! (following naming and location conventions)
$version="v100"
$name="skel_name" !placeholder for setup ID
$user="YOURusername"
$group="YOURgroup"
$myproject="YOURprojectname"
$sourcedir="./"
$input_path="/home/"group"/"user"/projects/"myproject"/pre-processing/geometries/"name"/"
$output_path="/home/"group"/"user"/projects/"myproject"/output/geometries/"name"/"
!input_path="./input/"
!$output_path="./output/"

! Cost function multipliers ------------------
!$lambda_posH    = 1.0                     ! 1.0e00
$lambda_posFLUX = 1.0e+2                      ! 1.0 (THP 1.0e+2)
$lambda_regFLUX = 1.0e+1                    ! 1.0e+0
!$lambda_regH    = 1.0e-11                 ! 1.0e-4
$lambda_obsMB   = 1.0e+1                  ! 1.0e-1
!$lambda_Hobs    = 1.0e-3                  ! 1.0e-3

! slope threshold for SIA
$slope_thresh =  1.0                      ! deg
                                          ! Farinotti et al. (2009)
                                          ! alpha_lim = 20.0 (near calving front)
                                          ! alpah_0   = 5.0  (interpolation correction factor)
                                          ! both values are very high, covering almost all of the glacier

! Ice physics constants ----------------------
! (define system of units)
! CHOICE: MPa - a - m
!                                         !           SI   -->   MPa - a - m
$yearinsec = 365.25*24*60*60              !            s   -->   a
$rhoice = 917.0/(1.0e6*yearinsec^2)       !     kg / m^3   -->   MPa a^2 / m^2
$gravity = -9.81*yearinsec^2              !        m / s   -->   m / a^2
$rhowater = 1028.0/(1.0e6*yearinsec^2)    !     kg / m^3   -->   MPa a^2 / m^2
$zsl = 0.0                                !            m   -->   m
$nflow = 3.0                              !            -   -->   -
!$fluidity = 32.0*1.0e-16*(1e+06^nflow)    !   Pa^-3 a^-1   -->   MPa^-3 a^-1
!$viscosity = fluidity^(-1.0/nflow)        !                -->   MPa yr^1/3
$viscosity = 6.78604*1e-2                 !                -->   MPa yr^1/3
$fluidity = viscosity^(-1.0*nflow)        !   Pa^-3 a^-1   -->   MPa^-3 a^-1
$coupling_length = 3.0                    ! no units

! Elevation dependent scaling factors
$visc_ref_elevation = 800.0               ! meters
$visc_el_gradient = 0.0/1000.0            ! no units
$yield_stress_ref_elevation = visc_ref_elevation
$yield_stress = 1.0e+5                    ! reference yield stress Pa --> MPa
$yield_stress_el_gradient = 0.0/1000.0    ! no units

! Slope dependent scaling factors
$visc_slope_threshold = 43.84809703       ! degrees
$visc_slope_gradient = -0.11955           ! degrees-1
$yield_stress_slope_threshold = 0.0 !43.84809703 ! degrees
$yield_stress_slope_gradient = -0.079     ! degrees-1


! Mesh and output location -------------------
Header
  CHECK KEYWORDS Warn
  Mesh DB "$input_path$/mesh/" "grid"
  !Include Path ""
  Results Directory "$output_path$"
End

! Simulations constants
Constants
  sea level             = Real $zsl
  water density         = Real $rhowater
  ice density           = Real $rhoice
  gravity constant      = Real $gravity
  flow exponent         = Real $nflow
  rate factor           = Real $fluidity
  yield stress          = Real $yield_stress
  slope threshold       = Real $slope_thresh
  coupling length       = Real $coupling_length

  viscosity reference elevation = Real $visc_ref_elevation
  viscosity elevation gradient  = Real $visc_el_gradient
  viscosity slope gradient      = Real $visc_slope_gradient 
  viscosity slope threshold     = Real $visc_slope_threshold

  yield stress reference elevation = Real $yield_stress_ref_elevation
  yield stress elevation gradient  = Real $yield_stress_el_gradient
  yield stress slope gradient      = Real $yield_stress_slope_gradient
  yield stress slope threshold     = Real $yield_stress_slope_threshold
End
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                            !
!            SIMULATION DETAILS              !
!                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Simulation
  Coordinate System  = Cartesian 2D 
  Simulation Type = Steady State


  Output Intervals = 100

  Steady State Max Iterations = 2000
  Steady State Min Iterations = 1

  Post File = "$name$_$version$_iter.vtu"

  max output level = 1
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                            !
!           PHYSICS AND MATERIAL             !
!                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Define modelled system ---------------------
Body 1
  Equation = 1
  Body Force = 1
  Material = 1
  Initial Condition = 1
End

!! Initial Conditions ------------------------ 
Initial Condition 1
  DJDsmbTop = Real 0.0
  Mask =  Real 1.0
  dhdt = Real 0.0
  deltaSPEED = Real 0.2
  hsia     = Real 100.0
  htau     = Real 100.0
  slopedirection_sia 1 = Real 0.0
  slopedirection_sia 2 = Real 0.0
  slopedirection_tau 1 = Real 0.0
  slopedirection_tau 2 = Real 0.0
End

! Ice material properties ------------------- 
Material 1
  UAdim = Real 0.0
  SSA Mean Density = Real $rhoice
End

! Applied external forces --------------------
Body Force 1

    Flow BodyForce 1 = Real 0.0
    Flow BodyForce 2 = Real 0.0
    Flow BodyForce 3 = Real $gravity

    !velocity 1 = Equals speed
    !velocity 2 = Equals speed
    velocity 1 = Equals mb
    velocity 2 = Equals mb

    grad_FLUXdeltaSPEED = Variable gradFLUX 1, gradFLUX 2, deltaSPEED
     REAL procedure "$sourcedir$/Executables/USFs" "AtimesC_BtimesC"
     !REAL MATC "tx(0)*tx(2)+tx(1)*tx(2)"

    deltaHsia = Variable deltaHsiaUP, deltaHsiaDOWN
     REAL procedure "$sourcedir$/Executables/USFs" "largerABSOLUTE"
     !REAL MATC "if (abs(tx(0))<abs(tx(1))) {abs(tx(0))} else {abs(tx(1))}"

    delta Top Surface Accumulation = Real 0.4

    TopAccumulation  = Variable mb,dhdt
        REAL procedure "$sourcedir$/Executables/EffectiveMB" "EffectiveMB"
    TopAccumulation variance = Variable mb
        REAL procedure "$sourcedir$/Executables/EffectiveMB" "VarianceSMB"
    TopAccumulationIni  = Variable mb,dhdt
        REAL procedure "$sourcedir$/Executables/EffectiveMB" "EffectiveMB"
    TopAccumulation a priori value = Equals TopAccumulationIni

    Top Surface Accumulation = Equals TopAccumulation


End


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                            !
!              SOLVER SEQUENCE               !
!                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Load input variables
Solver 1
  Exec Solver = Before simulation

  Equation = "ScatteredInter_gridded"

  procedure = "Scattered2DDataInterpolator" "Scattered2DDataInterpolator"

  Bounding Box dx = Real 1000.

  Variable 1 = File "surface"
  Variable 1 data file = File "$input_path$/insetDEM.nc"
  Variable 1 Fill Value = Real -9999
!!  Valid Min Value 2 = Real 5.0
!!  Variable 1 method = String "li"

  Variable 2 = File "mb"
  Variable 2 data file = File "$input_path$/insetSMB.nc"
  Variable 2 Fill Value = Real -9999
! Interpolation Multiplier 2 = Real $1.0/0.917
!  Variable 2 method = String "li"

  Variable 3 = File "dhdt"
  Variable 3 data file = File "$input_path$/insetDHDT.nc"
!  Variable 3 method = String "li"

!  Variable 4 = File "speed"
!  Variable 4 data file = File "$input_path$/insetVMAG.nc"
!  Variable 4 Fill Value = Real -9999
!  Valid Min Value 4 = Real 0.0
!!  Variable 4 method = String "li"

  Variable 4 = File "dist2obs"
  Variable 4 data file = File "$input_path$/insetDIST2OBS.nc"
!  Variable 4 method = String "li"

  Variable 5 = File "dist2mar"
  Variable 5 data file = File "$input_path$/insetDIST2MAR.nc"
!  Variable 4 method = String "li"

End

Solver 2
  Exec Solver = Before simulation

  Equation = "ScatteredInter_notgridded"

  procedure = "Scattered2DDataInterpolator" "Scattered2DDataInterpolator"

  Variable 1 = String "hobs"
  Variable 1 data file = File "$input_path$/obsTHI.xyz"
!  Variable 1 method = String "li"

  Variable 2 = String "dhobs"
  Variable 2 data file = File "$input_path$/obsUNC.xyz"
!  Variable 2 method = String "li"

!  Variable 3 = File "smbcorr"
!  Variable 3 data file = File "$input_path$/insetSMBCORR.nc"
!  Variable 3 Fill Value = Real -9999
!!  Variable 3 method = String "li"

End


! Determine spatial SMB gradient  ------------
! this is only necessary for getting the flux
! directions where surface slopes are zero.
! DEM is completely flat for some glaciers 
! in South Spitsbergen
Solver 3
   Exec Solver = before Simulation

   Equation = "DZs"
   Variable = -dofs 2 "DZs"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "mb"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

Solver 4
   Exec Solver = before Simulation

   Equation = "surface slopes"
   Variable = -dofs 2 "surfslope"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "surface"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End


! Export variables ---------------------------
! into standard Elmer output
Solver 5
   Exec Solver = before Simulation
   Equation = "UpdateExport"
   Variable = -nooutput dumy

   Procedure = "ElmerIceSolvers" "UpdateExport"

   Exported Variable 1 = Velocity
   Exported Variable 1 DOFS = 2

   Exported Variable 2 = TopAccumulation
   Exported Variable 2 DOFS = 1

   Exported Variable 3 = TopAccumulationIni
   Exported Variable 3 DOFS = 1

   Exported Variable 4 = mb
   Exported Variable 4 DOFS = 1

   Exported Variable 5 = surface
   Exported Variable 5 DOFS = 1

   !Exported Variable 6 = speed
   !Exported Variable 6 DOFS = 1

   Exported Variable 6 = deltaSPEED
   Exported Variable 6 DOFS = 1

   Exported Variable 7 = dhdt
   Exported Variable 7 DOFS = 1

   Exported Variable 8 = hobs
   Exported Variable 8 DOFS = 1

   Exported Variable 9 = dhobs
   Exported Variable 9 DOFS = 1

!   Exported Variable 10 = smbcorr
!   Exported Variable 10 DOFS = 1

   Exported Variable 10 = dist2obs
   Exported Variable 10 DOFS = 1

   Exported Variable 11 = dist2mar
   Exported Variable 11 DOFS = 1

End

! FLUX DIRECTION SOLVER ---------------------------------
Solver 6

  Exec Solver = before Simulation
  Equation = "INITBALANCEFLUX INIT"
  Variable = -dofs 2 "fluxdirection_sia"

  Procedure = "$sourcedir$/Executables/SMOOTHdrivingSTRESS_sia" "SMOOTHdrivingSTRESS_sia"

  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = Integer 80

   Nonlinear System Max Iterations = 20
   Nonlinear System Convergence Tolerance  = 1.0e-12!-12
   Nonlinear System Newton After Iterations = 10
   Nonlinear System Newton After Tolerance = 1.0e-08!-08
   Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = Real 1.0e-10!-10

End

! Compute slope from smooth driving stress field
Solver 7

   Exec Solver = before Simulation
   Equation = "InitSLOPEfield"

   Variable = -nooutput "initsloper"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSLOPE_drivingSTRESS" "computeSLOPE_drivingstress"

   Problem Dimension   = Integer 2
   Thickness Variable Name = String "Hsia"
   Flux Direction Variable Name  = String "fluxdirection_sia"
   Slope Variable Name = String "slopedirection_sia"

   Exported Variable 1 = slopedirection_sia
   Exported Variable 1 DOFS = 2

end

! Determine spatial slopex gradient  ------------
! required for slope divergence masking (flat ridges & divides)
Solver 8
   Exec Solver = before Simulation

   Equation = "DSLOPEX init"
   Variable = -dofs 2 "graddsdx_sia"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_sia 1"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! Determine spatial slopey gradient  ------------
! required for slope divergence masking (flat ridges & divides)
Solver 9
   Exec Solver = before Simulation

   Equation = "DSLOPEY init"
   Variable = -dofs 2 "graddsdy_sia"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_sia 2"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! FLUX DIRECTION SOLVER TAU ---------------------------------
Solver 10

  Exec Solver = before Simulation
  Equation = "INITBALANCEFLUX TAU"
  Variable = -dofs 2 "fluxdirection_tau"

  Procedure = "$sourcedir$/Executables/SMOOTHdrivingSTRESS_tau" "SMOOTHdrivingSTRESS_tau"

  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = Integer 80

   Nonlinear System Max Iterations = 20
   Nonlinear System Convergence Tolerance  = 1.0e-12!-12
   Nonlinear System Newton After Iterations = 10
   Nonlinear System Newton After Tolerance = 1.0e-08!-08
   Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = Real 1.0e-10!-10

End

! Compute slope from smooth driving stress field
Solver 11

   Exec Solver = before Simulation
   Equation = "InitSLOPEfield tau"

   Variable = -nooutput "initsloper_tau"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSLOPE_drivingSTRESS" "computeSLOPE_drivingstress"

   Problem Dimension   = Integer 2
   Thickness Variable Name = String "Htau"
   Flux Direction Variable Name  = String "fluxdirection_tau"
   Slope Variable Name = String "slopedirection_tau"

   Exported Variable 1 = slopedirection_tau
   Exported Variable 1 DOFS = 2

end

! Determine spatial slopex gradient  ------------
! required for slope divergence masking (flat ridges & divides)
Solver 12
   Exec Solver = before Simulation

   Equation = "DSLOPEX tau init"
   Variable = -dofs 2 "graddsdx_tau"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_tau 1"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! Determine spatial slopey gradient  ------------
! required for slope divergence masking (flat ridges & divides)
Solver 13
   Exec Solver = before Simulation

   Equation = "DSLOPEY tau init"
   Variable = -dofs 2 "graddsdy_tau"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_tau 2"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! DIRECT THICKNESS SOLVER --------------------
! not based on adjoint operator
Solver 14

   Exec Solver = before Simulation
   Equation = "InitialIceflux"
   Variable = -dofs 1 "FLUX"

   Procedure = "$sourcedir$/Executables/AdjointThicknessSolvers" "IceFluxSolver"

   Calculate Loads = Logical True


   Linear System Solver = Direct
   !Linear System Direct Method = umfpack
   Linear System Direct Method = mumps

   Linear System Convergence Tolerance = Real 1.0e-10

   ! equation is linear if no min/max
   Nonlinear System Max Iterations = 100
   Nonlinear System Convergence Tolerance  = 1.0e-10
   Nonlinear System Relaxation Factor = 1.00

   Steady State Convergence Tolerance = Real 1.0e-10

   Stabilization Method = stabilized
   Apply Dirichlet = Logical False

   Flow Solution Name = String "Velocity"
   Slope Variable Name= String "fluxdirection_sia"
   MB slope Variable Name = String "DZs"

   Exported Variable 1 = "FLUX Residual"
   Exported Variable 2 = File "Mask"
   !Exported Variable 3 = File "surface"
   !Exported Variable 4 = File "dhdt"

End


! Compute rate factor from flux and observed thicknesses
Solver 15

   Exec Solver = before Simulation
   Equation = "InitRateFactor"

   Variable = -nooutput "roule"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_Hobs" "computeSIA_Hobs"

   Problem Dimension   = Integer 2
   Flux Variable Name  = String "flux"
   Slope Variable Name = String "slopedirection_sia"
   X Slope Gradient Name = String "graddsdx_sia"
   Y Slope Gradient Name = String "graddsdy_sia"

   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"
   Viscosity Averaging = Logical True
   Calving Flag        = Logical False

   Observation File Name = File "$input_path$/obsTHI.xyz"

end

! Compute rate factor from flux and observed thicknesses
Solver 16

   Exec Solver = before Simulation
   Equation = "YieldStressInit"

   Variable = -nooutput "roule"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeTAU_Hobs" "computeTAU_Hobs"

   Problem Dimension   = Integer 2
   Slope Variable Name = String "slopedirection_tau"
   X Slope Gradient Name = String "graddsdx_tau"
   Y Slope Gradient Name = String "graddsdy_tau"

   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"

   Viscosity Averaging = Logical True
   Calving Flag        = Logical False

   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"

   Observation File Name = File "$input_path$/obsTHI.xyz"

end

Solver 17
  Exec Solver = before Simulation
  Equation = "InitRatefactorInterpolator"

  procedure = "Scattered2DDataInterpolator" "Scattered2DDataInterpolator"

   CheckNaN = Logical False

  Variable 1 = String "visc_ref"
  Variable 1 data file = File "./ice_viscosity.dat"
  !Variable 1 method = String "li"
  !Variable 1 method = String "cs"
  !! method cubic spline (csa)
  !Variable 1 nppc = integer 5
  !!set the average number of points per cell (default = 5,
  !!works best for uniform data. Decrease to get smaller
  !!               cells or increase to get larger cells)
  !Variable 1 k = integer 140
  !! set the spline sensitivity (default = 140, reduce to get
  !!                     smoother results)


  Variable 2 = String "visc_ref_mean"
  Variable 2 data file = File "./ice_viscosity_mean.dat"
  !Variable 2 method = String "li"
  !Variable 2 method = String "cs"

  Variable 3 = String "tau_ref"
  Variable 3 data file = File "./yield_stress.dat"
  !Variable 3 method = String "li"
  !Variable 3 method = String "cs"

  Variable 4 = String "tau_ref_mean"
  Variable 4 data file = File "./yield_stress_mean.dat"
  !Variable 4 method = String "li"
  !Variable 4 method = String "cs"

End


Solver 18
   Exec Solver = before Simulation
   Equation = "InitUpdateExport Rate Factor"
   Variable = -nooutput initdumy

   Procedure = "ElmerIceSolvers" "UpdateExport"

   Exported Variable 1 = visc_ref
   Exported Variable 1 DOFS = 1

   Exported Variable 2 = visc_ref_mean
   Exported Variable 2 DOFS = 1

   Exported Variable 3 = tau_ref
   Exported Variable 3 DOFS = 1

   Exported Variable 4 = tau_ref_mean
   Exported Variable 4 DOFS = 1

End


! Mismatch with SIA ice thickness
Solver 19

   Exec Solver = before Simulation
   Equation = "InitSIAthickness"

   Variable = -nooutput "initthicker"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_thickness" "computeSIA_thickness"

   Problem Dimension   = Integer 2
   Variable Name       = String "Hsia"
   Effective Viscosity Variable Name = String "visc_eff"
   Flux Variable Name  = String "flux"
   Slope Variable Name = String "slopedirection_sia"
   Reference Viscosity Variable Name = String "visc_ref"
   !Mean Ratefactor Variable Name = String "visc_ref_mean"
   X Slope Gradient Name = String "graddsdx_sia"
   Y Slope Gradient Name = String "graddsdy_sia"
   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"

   Exported Variable 1 = Hsia
   Exported Variable 1 DOFS = 1
  
   Exported Variable 2 = visc_eff
   Exported Variable 2 DOFS = 1
end

! Mismatch with plastic ice thickness
Solver 20

   Exec Solver = before Simulation
   Equation = "InitTAUthickness"

   Variable = -nooutput "initthicker"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeTAU_thickness" "computeTAU_thickness"

   Problem Dimension   = Integer 2
   Variable Name       = String "Htau"
   Surface Variable Name = String "surface"
   Slope Variable Name = String "slopedirection_tau"
   Reference Yield Stress Variable Name = String "tau_ref"
   Effective Yield Stress Variable Name = String "tau_eff"
   X Slope Gradient Name = String "graddsdx_tau"
   Y Slope Gradient Name = String "graddsdy_tau"
   Margin Distance Variable Name = String "dist2mar"
   Obs Distance Variable Name = String "dist2obs"

   Exported Variable 1 = Htau
   Exported Variable 1 DOFS = 1

   Exported Variable 2 = tau_eff
   Exported Variable 2 DOFS = 1

end


! FLUX DIRECTION SOLVER ---------------------------------
Solver 21

  Exec Solver = before Simulation
  Equation = "BALANCEFLUX"
  Variable = -dofs 2 "fluxdirection_sia"

  Procedure = "$sourcedir$/Executables/SMOOTHdrivingSTRESS_sia" "SMOOTHdrivingSTRESS_sia"

  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = Integer 80

   Nonlinear System Max Iterations = 20
   Nonlinear System Convergence Tolerance  = 1.0e-12!-12
   Nonlinear System Newton After Iterations = 10
   Nonlinear System Newton After Tolerance = 1.0e-08!-08
   Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = Real 1.0e-10!-10

End

! Compute slope from smooth driving stress field
Solver 22

   Exec Solver = before Simulation
   Equation = "SlopeDirection"

   Variable = -nooutput "initsloper"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSLOPE_drivingSTRESS" "computeSLOPE_drivingstress"

   Problem Dimension   = Integer 2
   Thickness Variable Name = String "Hsia"
   Flux Direction Variable Name  = String "fluxdirection_sia"
   Slope Variable Name = String "slopedirection_sia"

   Exported Variable 1 = slopedirection_sia
   Exported Variable 1 DOFS = 2

end

! Determine spatial slopex gradient  ------------
Solver 23

   Exec Solver = before Simulation
   Equation = "DSLOPEX"
   Variable = -dofs 2 "graddsdx_sia"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_sia 1"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! Determine spatial slopey gradient  ------------
Solver 24

   Exec Solver = before Simulation
   Equation = "DSLOPEY"
   Variable = -dofs 2 "graddsdy_sia"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_sia 2"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! FLUX DIRECTION SOLVER TAU ---------------------------------
Solver 25

  Exec Solver = before Simulation
  Equation = "BALANCEFLUX TAU"
  Variable = -dofs 2 "fluxdirection_tau"

  Procedure = "$sourcedir$/Executables/SMOOTHdrivingSTRESS_tau" "SMOOTHdrivingSTRESS_tau"

  Calculate Loads = Logical True

  Linear System Solver = Direct
  Linear System Direct Method = mumps
  mumps percentage increase working space = Integer 80

   Nonlinear System Max Iterations = 20
   Nonlinear System Convergence Tolerance  = 1.0e-12!-12
   Nonlinear System Newton After Iterations = 10
   Nonlinear System Newton After Tolerance = 1.0e-08!-08
   Nonlinear System Relaxation Factor = 1.00

  Steady State Convergence Tolerance = Real 1.0e-10!-10

End

! Compute slope from smooth driving stress field
Solver 26


   Exec Solver = before Simulation
   Equation = "SLOPEfield tau"

   Variable = -nooutput "sloper_tau"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSLOPE_drivingSTRESS" "computeSLOPE_drivingstress"

   Problem Dimension   = Integer 2
   Thickness Variable Name = String "Htau"
   Flux Direction Variable Name  = String "fluxdirection_tau"
   Slope Variable Name = String "slopedirection_tau"

   Exported Variable 1 = slopedirection_tau
   Exported Variable 1 DOFS = 2

end

! Determine spatial slopex gradient  ------------
Solver 27

   Exec Solver = before Simulation
   Equation = "DSLOPEX tau"
   Variable = -dofs 2 "graddsdx_tau"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_tau 1"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! Determine spatial slopey gradient  ------------
Solver 28

   Exec Solver = before Simulation
   Equation = "DSLOPEY tau"
   Variable = -dofs 2 "graddsdy_tau"

   Procedure = "$sourcedir$/Executables/NodalSlopeSolver" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "slopedirection_tau 2"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! DIRECT THICKNESS SOLVER --------------------
! not based on adjoint operator
Solver 29

   Equation = "Iceflux"
   Variable = -dofs 1 "FLUX"

   Procedure = "$sourcedir$/Executables/AdjointThicknessSolvers" "IceFluxSolver"

   Calculate Loads = Logical True


   Linear System Solver = Direct
   !Linear System Direct Method = umfpack
   Linear System Direct Method = mumps

   Linear System Convergence Tolerance = Real 1.0e-10

   ! equation is linear if no min/max
   Nonlinear System Max Iterations = 100
   Nonlinear System Convergence Tolerance  = 1.0e-10
   Nonlinear System Relaxation Factor = 1.00

   Steady State Convergence Tolerance = Real 1.0e-10

   Stabilization Method = stabilized
   Apply Dirichlet = Logical False

   Flow Solution Name = String "Velocity"
   Slope Variable Name= String "fluxdirection_sia"
   MB slope Variable Name = String "slopedirection_sia"

   Exported Variable 1 = "FLUX Residual"
   Exported Variable 2 = File "Mask"
   !Exported Variable 3 = File "surface"
   !Exported Variable 4 = File "dhdt"

End

! Compute rate factor from flux and observed thicknesses
Solver 30

   Equation = "RateFactor"

   Variable = -nooutput "roule"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_Hobs" "computeSIA_Hobs"

   Problem Dimension   = Integer 2
   Flux Variable Name  = String "flux"
   Slope Variable Name = String "slopedirection_sia"
   X Slope Gradient Name = String "graddsdx_sia"
   Y Slope Gradient Name = String "graddsdy_sia"

   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"
   Viscosity Averaging = Logical True
   Calving Flag        = Logical False

   Observation File Name = File "$input_path$/obsTHI.xyz"

end

! Compute rate factor from flux and observed thicknesses
Solver 31

   Equation = "YieldStress"

   Variable = -nooutput "roule"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeTAU_Hobs" "computeTAU_Hobs"

   Problem Dimension   = Integer 2
   Flux Variable Name  = String "flux"
   Slope Variable Name = String "slopedirection_tau"
   X Slope Gradient Name = String "graddsdx_tau"
   Y Slope Gradient Name = String "graddsdy_tau"
   Margin Distance Variable Name = String "dist2mar"

   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"

   Viscosity Averaging = Logical True
   Calving Flag        = Logical False

   Observation File Name = File "$input_path$/obsTHI.xyz"

end

Solver 32
  Equation = "RatefactorInterpolator"

  procedure = "Scattered2DDataInterpolator" "Scattered2DDataInterpolator"

   CheckNaN = Logical False

  Variable 1 = String "visc_ref"
  Variable 1 data file = File "./ice_viscosity.dat"
  !Variable 1 method = String "li"
  !Variable 1 method = String "cs"
  !! method cubic spline (csa)
  !Variable 1 nppc = integer 5
  !!set the average number of points per cell (default = 5,
  !!works best for uniform data. Decrease to get smaller
  !!               cells or increase to get larger cells)
  !Variable 1 k = integer 140
  !! set the spline sensitivity (default = 140, reduce to get
  !!                     smoother results)


  Variable 2 = String "visc_ref_mean"
  Variable 2 data file = File "./ice_viscosity_mean.dat"
  !Variable 2 method = String "li"
  !Variable 2 method = String "cs"

  Variable 3 = String "tau_ref"
  Variable 3 data file = File "./yield_stress.dat"
  !Variable 3 method = String "li"
  !Variable 3 method = String "cs"

  Variable 4 = String "tau_ref_mean"
  Variable 4 data file = File "./yield_stress_mean.dat"
  !Variable 4 method = String "li"
  !Variable 4 method = String "cs"

End

! Export variables ---------------------------
! into standard Elmer output
Solver 33
   Equation = "UpdateExport Rate Factor"
   Variable = -nooutput dumy

   Procedure = "ElmerIceSolvers" "UpdateExport"

   Exported Variable 1 = visc_ref
   Exported Variable 1 DOFS = 1

   Exported Variable 2 = visc_ref_mean
   Exported Variable 2 DOFS = 1

   Exported Variable 3 = tau_ref
   Exported Variable 3 DOFS = 1

   Exported Variable 4 = tau_ref_mean
   Exported Variable 4 DOFS = 1

End


! Mismatch with SIA ice thickness
Solver 34

   Equation = "SIAthickness"

   Variable = -nooutput "thicker"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_thickness" "computeSIA_thickness"

   Problem Dimension   = Integer 2
   Variable Name       = String "Hsia"
   Effective Viscosity Variable Name = String "visc_eff"
   Flux Variable Name  = String "flux"
   Slope Variable Name = String "slopedirection_sia"
   Reference Viscosity Variable Name = String "visc_ref"
   !Mean Ratefactor Variable Name = String "visc_ref_mean"
   X Slope Gradient Name = String "graddsdx_sia"
   Y Slope Gradient Name = String "graddsdy_sia"
   Surface Variable Name = String "surface"
   Obs Distance Variable Name = String "dist2obs"
   Margin Distance Variable Name = String "dist2mar"

   Exported Variable 1 = Hsia
   Exported Variable 1 DOFS = 1
   
   Exported Variable 2 = visc_eff
   Exported Variable 2 DOFS = 1

end



! Mismatch with plastic ice thickness
Solver 35

   Equation = "TAUthickness"

   Variable = -nooutput "thicker"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeTAU_thickness" "computeTAU_thickness"

   Problem Dimension   = Integer 2
   Variable Name       = String "Htau"
   Surface Variable Name = String "surface"
   Slope Variable Name = String "slopedirection_tau"
   Reference Yield Stress Variable Name = String "tau_ref"
   Effective Yield Stress Variable Name = String "tau_eff"
   X Slope Gradient Name = String "graddsdx_tau"
   Y Slope Gradient Name = String "graddsdy_tau"
   Margin Distance Variable Name = String "dist2mar"
   Obs Distance Variable Name = String "dist2obs"

   Exported Variable 1 = Htau
   Exported Variable 1 DOFS = 1

   Exported Variable 2 = tau_eff
   Exported Variable 2 DOFS = 1

end


Solver 36
!! Compute Cost function as SUM_i=1^Nobs 0.5*(H-Hobs)^2
   Equation = "Cost"
   Variable = -nooutput "dumy1"
   procedure = "$sourcedir$/Executables/CostSolver_FLUXpos" "CostSolver_FLUXpos"

   Problem Dimension   = Integer 2
   Reset Cost Value    = Logical True
   Lambda              = Real $lambda_posFLUX
   Cost Variable Name  = String "CostValue"  
!   Mask Variable Name  = String "obs_mask"
!   Speed Variable Name = String "speed"
!   Hsia Variable Name  = String "Hsia"
   ! Name of Cost Variable
   Cost Filename       = File "Cost_FLUXpos_$name$.dat"

   Exported Variable 1 = -dofs 1 "Hb"
   Exported Variable 2 = -dofs 1 "CostValue"

End

Solver 37
!! Regularisation Jreg=int_domain 0.5*(gradH)^2
   Equation = "Regularisation"
   !  Exec Solver = Never
   Variable = -nooutput "dumyR"

   procedure = "$sourcedir$/Executables/AdjointSSASolvers" "CostSolver_SSA_Regularisation"

   Problem Dimension       = Integer 2
   Cost Filename           = File "Cost_regFLUX_"$name".dat"
   Optimized Variable Name = String "Flux"
   Gradient Variable Name  = String "hb"
   Cost Variable Name      = String "CostValue"
   Lambda                  = Real $lambda_regFLUX
   Reset Cost Value        = Logical False
   A priori Regularisation = Logical False

end

Solver 38
   Equation = "RegularisationMB"
   Variable = -nooutput "dumyR"

   procedure = "$sourcedir$/Executables/AdjointSSASolvers" "CostSolver_SSA_Regularisation"

   Problem Dimension       = Integer 2
   Cost Filename           = File "CostAPrioriMB_"$name".dat"
   Optimized Variable Name = String "TopAccumulation"
   Gradient Variable Name  = String "hb"
   Cost Variable Name      = String "CostValue"
!   Weighting Mask Name=String "WeightMask"
   Lambda                  = Real $lambda_obsMB
   Reset Cost Value        = Logical False
   A priori Regularisation = Logical True

   Exported Variable 1 = -dofs 1 "Hb"
   Exported Variable 2 = -dofs 1 "CostValue"
end

Solver 39
!!!!  Adjoint Solution
   Equation = "FluxAdjoint"
   Variable = FluxAdjoint
   Variable Dofs = 1

   procedure = "$sourcedir$/Executables/AdjointThicknessSolvers" "AdjointSolver_Flux"

   Linear System Solver = Direct
   Linear System Direct Method = umfpack

   !Name of the flow solution solver
   Flow Solution Equation Name = string "Iceflux"

End

!!!!!  Compute Derivative of Cost function / Velocity and TopSurface Accumulation
Solver 40
   Equation = "Flux_DJDp"
   Variable = -nooutput "dumy2"

   procedure = "$sourcedir$/Executables/AdjointThicknessSolvers" "DJDp_Adjoint_IceFluxSolver"

   Apply Dirichlet      = Logical False
   Stabilization Method = stabilized

   Thickness Solution Name = String "flux"
   Adjoint Solution Name   = String "FluxAdjoint"
   Flow Solution Name      = String "Velocity"
   Slope Variable Name     = String "fluxdirection_sia"

!   ComputeDJDUV            = Logical True
   ComputeDJDsmbTop        = Logical True
   Reset DJDsmbTop         = Logical True

   Exported Variable 1     = -dofs 1 DJDsmbTop
end

Solver 41
   !! CREATE INTERMEDIATE VARIABLE FOR THE OPTIMISATION

   Equation = "WrapVar"
   Procedure = File "$sourcedir$/Executables/Wrap" "Wrap"
   Variable = -nooutput "dumyUP"

   Exported Variable 1 = -dofs 1 Var
   Exported Variable 2 = -dofs 1 DJDVar
End

Solver 42
   !!!!! Optimization procedure  of VAR (dimension 3)
   !Exec Solver = never
   Equation = "Optimize_m1qn3"
   !!  Solver need to be associated => Define dumy variable
   Variable = -nooutput "UB"
   Variable DOFs = 1

   !procedure = "$sourcedir$/Executables/Optimize_m1qn3Serial" "Optimize_m1qn3Serial"
   procedure = "$sourcedir$/Executables/Optimize_m1qn3Parallel_Multi.so" "Optimize_m1qn3Parallel"

   Cost Variable Name = String "CostValue"
   Optimized Variable Name = String "Var"
   Gradient Variable Name = String "DJDVar"
   gradient Norm File = String "GradientNormAdjoint_"$name".dat"

   Optimisation Mask Variable = String Mask

   ! M1QN3 Parameters
   M1QN3 dxmin = Real 1.0e-10
   M1QN3 epsg = Real  1.e-14
   M1QN3 niter = Integer 1000
   M1QN3 nsim = Integer 2000
   M1QN3 impres = Integer 5
   M1QN3 DIS Mode = Logical False
   M1QN3 df1 = Real 0.1
   M1QN3 normtype = String "dfn"
   M1QN3 OutputFile = File  "M1QN3_"$name".out"
   M1QN3 ndz = Integer 20
End

Solver 43
   !! Unwrap from values of Var returnesd by Optimization update values of Velocity and TopSurfaceAccumlulation

   Equation = "UnWrapVar"
   Procedure = File "$sourcedir$/Executables/Wrap" "UnWrap"
   Variable = -nooutput "dumyUP2"
End

! Determine spatial thickness gradient  ------------
! required for post-processing caluculation of
! thickness uncertainties
Solver 44
   Exec Solver = after all
   Equation = "FLUXslope"
   Variable = -dofs 2 "gradFLUX"
   
   Procedure = "$sourcedir$/Executables/NodalSlopeSolver2" "NodalSlopeSolver"
! Compute the 2D gradient of the variable >Variable Name<
   Variable Name = string "Flux"
! Gradient computed by default at the nodes or 
! if FE consistent average = Logical True:
!       gradient computed at the Integration points and averaged 
!       at the nodes using FE basis functions and weights
   FE consistent average = Logical True

End

! Export variables ---------------------------
! into standard Elmer output
Solver 45
   Exec Solver = after all
   Equation = "UpdateExport grad_FLUXdeltaSPEED"
   Variable = -nooutput dumber

   Procedure = "ElmerIceSolvers" "UpdateExport"
   
   Exported Variable 1 = grad_FLUXdeltaSPEED
   Exported Variable 1 DOFS = 1
End

! Mismatch with SIA ice thickness
Solver 46
   Exec Solver = after all
   Equation = "deltaFLUXfromHobs"

   Variable = -nooutput "deltaFfromHobs"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_deltaflux" "computeSIA_deltaflux"

   Problem Dimension   = Integer 2
   Variable Name       = String "deltaFLUX"
   Flux Variable Name  = String "FLUX"
   Thickness Uncertainty Name = String "dHobs"
   Slope Variable Name = String "slopedirection_sia"
   Measurement Error Variable Name = String "dhobs"
   Viscosity Variable Name = String "visc_eff"
   Observation File Name = File "$input_path$/obsTHI.xyz"

   Exported Variable 1 = deltaFLUX
   Exported Variable 1 DOFS = 1

end

! DIRECT THICKNESS SOLVER --------------------
! not based on adjoint operator
Solver 47
   Exec Solver = after all
   Equation = "IcefluxUncertainty"
   Variable = -dofs 1 "deltaFLUXup"

   Procedure = "$sourcedir$/Executables/AdjointThicknessSolvers" "IceFluxUncertaintySolver"

!   Calculate Loads = Logical True


   Linear System Solver = Direct
   !Linear System Direct Method = umfpack
   Linear System Direct Method = mumps

   Linear System Convergence Tolerance = Real 1.0e-10

   ! equation is linear if no min/max
   Nonlinear System Max Iterations = 100
   Nonlinear System Convergence Tolerance  = 1.0e-10
   Nonlinear System Relaxation Factor = 1.00

   Steady State Convergence Tolerance = Real 1.0e-10

   Stabilization Method = stabilized
   Apply Dirichlet = Logical False

   Flow Solution Name = String "Velocity"
   Slope Variable Name= String "fluxdirection_sia"
   MB slope Variable Name = String "DZs"

   Exported Variable 1 = "deltaFLUXup Residual"

End

! DIRECT THICKNESS SOLVER --------------------
! not based on adjoint operator
Solver 48
   Exec Solver = after all
   Equation = "inverseIcefluxUncertainty"
   Variable = -dofs 1 "deltaFLUXdown"

   Procedure = "$sourcedir$/Executables/AdjointThicknessSolvers" "inverseIceFluxUncertaintySolver"

!   Calculate Loads = Logical True


   Linear System Solver = Direct
   !Linear System Direct Method = umfpack
   Linear System Direct Method = mumps

   Linear System Convergence Tolerance = Real 1.0e-10

   ! equation is linear if no min/max
   Nonlinear System Max Iterations = 100
   Nonlinear System Convergence Tolerance  = 1.0e-10
   Nonlinear System Relaxation Factor = 1.00

   Steady State Convergence Tolerance = Real 1.0e-10

   Stabilization Method = stabilized
   Apply Dirichlet = Logical False

   Flow Solution Name = String "Velocity"
   Slope Variable Name= String "fluxdirection_sia"
   MB slope Variable Name = String "DZs"

   Exported Variable 1 = "deltaFLUXdown Residual"

End

! Mismatch with SIA ice thickness
Solver 49
   Exec Solver = after all
   Equation = "deltaSIAthicknessUP"

   Variable = -nooutput "deltathickerUP"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_deltathickness" "computeSIA_deltathickness"

   Problem Dimension   = Integer 2
   Variable Name       = String "deltaHsiaUP"
   delta Flux Variable Name  = String "deltaFLUXup"
   Flux Variable Name  = String "FLUX"
   Slope Variable Name = String "slopedirection_sia"
   Viscosity Variable Name = String "visc_eff"

   Exported Variable 1 = deltaHsiaUP
   Exported Variable 1 DOFS = 1

end

! Mismatch with SIA ice thickness
Solver 50
   Exec Solver = after all
   Equation = "deltaSIAthicknessDOWN"

   Variable = -nooutput "deltathickerDOWN"
!   Variable DOFs = 1

   procedure = "$sourcedir$/Executables/computeSIA_deltathickness" "computeSIA_deltathickness"

   Problem Dimension   = Integer 2
   Variable Name       = String "deltaHsiaDOWN"
   delta Flux Variable Name  = String "deltaFLUXdown"
   Flux Variable Name  = String "FLUX"
   Slope Variable Name = String "slopedirection_sia"
   Viscosity Variable Name = String "visc_eff"

   Exported Variable 1 = deltaHsiaDOWN
   Exported Variable 1 DOFS = 1

end

! Export variables ---------------------------
! into standard Elmer output
Solver 51
   Exec Solver = after all
   Equation = "UpdateExport deltaHsia"
   Variable = -nooutput dumbo

   Procedure = "ElmerIceSolvers" "UpdateExport"

   Exported Variable 1 = deltaHsia
   Exported Variable 1 DOFS = 1
End

Solver 52
  Exec Solver = after all
  Equation = "Local Output final"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "lucky"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_thickness" "POI_output_thickness"

  Problem Dimension = Integer 2

  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_hsia"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 53
  Exec Solver = after all
  Equation = "Local Output final - Ice Flux"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckier"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "flux"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_flux"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end


Solver 54
  Exec Solver = after all
  Equation = "Local Output final - Ice Viscosity"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckiest"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "visc_ref"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_visc_ref"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 55
  Exec Solver = after all
  Equation = "Local Output final - Effective Ice Viscosity"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckiest_eff"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "visc_eff"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_visc_eff"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 56
  Exec Solver = after all
  Equation = "Local Output final - Delta SIA Thickness"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckyluckest22"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "deltaHsia"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_deltahsia"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 57
  Exec Solver = after all
  Equation = "Local Output final - MB"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckyluckest222"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "topaccumulation"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_amb"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 58
  Exec Solver = after all
  Equation = "Local Output final - DHDT"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckyluckest2222"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "topaccumulationini"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_ambini"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 59
  Exec Solver = after all
  Equation = "Local Output final - HTAU"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckierierier"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "HTAU"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_htau"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 60
  Exec Solver = after all
  Equation = "Local Output final - TAU REF"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckierierier_tau_ref"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "tau_ref"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_tau_ref"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

Solver 61
  Exec Solver = after all
  Equation = "Local Output final - TAU EFF"

! Solver needs to be associated => Define dummy variable
  Variable = -nooutput "luckierierier_tau_eff"
  Variable DOFs = 1

  procedure = "$sourcedir$/Executables/POI_output_final" "POI_output_final"

  Problem Dimension = Integer 2

  Output Variable Name = String "tau_eff"
  Thickness Variable Name = String "HSIA"
  Flux Variable Name = String "flux"
  Slope Variable Name = String "slopedirection_sia"
  Surface Variable Name = String "surface"
  POI File Name = File "$input_path$/insetDEM4OUTPUT.xyz"
  Result File Name = File "$output_path$/$name$_$version$_poi_tau_eff"
  Result save interval = Integer 1
!  Save used data = LOGICAL True
end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                            !
!               DEFINE SEQUENCE              !
!                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Equation 1
  Active Solvers (61)= 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
End

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                            !
!              SET BOUNDARY CONDITIONS       !
!                                            !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Boundary Condition 1
 Target Boundaries = 1

  Mask= Real -1.0

  Flux= Real 0.0
  deltaFLUXup = Real 0.0
  deltaFLUXdown = Real 0.0
!  Flux = Equals intAMB
!  Flux Condition = Variable TopAccumulation
!     REAL MATC "if (tx(0)>0.0) {1.0} else {-1.0}"

  h= Real 5.0

End


Boundary Condition 2
 Target Boundaries = 2

  Mask= Real -1.0

!  Flux= Real 0.0
!  h= Real 5.0

End


Boundary Condition 3
 Target Boundaries = 3

  Mask= Real -1.0

!  Flux= Real 0.0
!  h= Real 5.0

End


Boundary Condition 4
 Target Boundaries = 4

  !Mask = Real -1.0
  !Flux = Real 0.0
  !deltaFLUXup = Real 0.0
  !deltaFLUXdown = Real 0.0
  deltaFLUXup = Equals deltaFLUX
  deltaFLUXdown = Equals deltaFLUX

End

